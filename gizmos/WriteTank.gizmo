#! C:/Program Files/Nuke8.0v2/nuke-8.0.v2.dll -nx
version 8.0 v2

##########################################################################################
##########################################################################################
#
# addUserKnob syntax
# ------------------
# <id> - this is the id of the knob type to add.  A full list can be found here:
#     http://docs.thefoundry.co.uk/nuke/63/ndkdevguide/knobs-and-handles/knobtypes.html
#
# <name> - name of the knob used when querying it in nuke, e.g. node.knob("<name>")
#
# l "" - Label to be used for the knob in the property editor
#
# t "" - tooltip to be displayed for this knob in the property editor
#
# T "" - this is the value to set for the knob - different knobs use this in different ways
#
# M {} - for enumeration knobs, this is the list of enumerations
#
# Additional knob flags
# ---------------------
# These are set/removed by doing +/-FLAG_NAME, e.g. +STARTLINE to ensure the knob starts a 
# new line in the property editor.  A full list of flags can be found here: 
#     http://docs.thefoundry.co.uk/nuke/63/ndkdevguide/knobs-and-handles/knobflags.html
#
##########################################################################################
##########################################################################################

Gizmo {

 note_font Verdana
 mapsize {0.15 0.15}
 addUserKnob {20 tank_tab l "Shotgun Write"}
 addUserKnob {4 tk_profile_list l Profile t "Select the Profile to use for this node" M {"Mono Exr, 16 bit" "Mono Dpx"}}
 addUserKnob {1 tank_channel l Channel t "The channel is a name you give to the write node to help identify it when you are using more than one output in your scene."}
 tank_channel output
 addUserKnob {6 tk_use_name_as_channel l "Use node name" t "Use the node name in place of the channel name" -STARTLINE}
 addUserKnob {6 tk_is_fully_constructed l "Is Fully Constructed" t "Internal - Gets set to True in 'onCreate'.  All 'knobChanged' calls before this are ignored" +DISABLED +INVISIBLE +STARTLINE}
 addUserKnob {1 profile_name l "Profile Name" t "The cached Profile for this node" +INVISIBLE}
 profile_name "Mono Exr, 16 bit"
 addUserKnob {1 render_template l "Sgtk Render Template" t "The Sgtk render template associated with this node" +INVISIBLE}
 render_template nuke_shot_render_mono_exr
 addUserKnob {1 publish_template l "Sgtk Publish Template" t "The Sgtk publish template associated with this node" +INVISIBLE}
 publish_template nuke_shot_render_pub_mono_exr
 addUserKnob {1 cached_path l "Sgtk Cached Path" t "The path for this write node" +INVISIBLE}
 cached_path //sledge/vol1/Projects/test_donat_project/Compositing/Images/Output/EV002/sandbox/images/EV002_v001/EV002_output_v001.%04d.exr
 addUserKnob {1 proxy_render_template l "Sgtk Proxy Render Template" t "The Sgtk render template associated with this node when rendering in proxy mode" +INVISIBLE}
 addUserKnob {1 proxy_publish_template l "Sgtk Proxy Publish Template" t "The Sgtk publish template associated with this node for proxy renders" +INVISIBLE}
 addUserKnob {1 tk_cached_proxy_path l "Sgtk Cached Proxy Path" t "The path for this write node when rendering in proxy mode" +INVISIBLE}
 tk_cached_proxy_path //sledge/vol1/Projects/test_donat_project/Compositing/Images/Output/EV002/sandbox/images/EV002_v001/EV002_output_v001.%04d.exr
 addUserKnob {1 tk_last_known_script l "Last Known Script" t "The last known script this Write node was saved in - used to determine if the script is being saved as a new file or not" +INVISIBLE}
 tk_last_known_script //sledge/vol1/Projects/test_donat_project/Compositing/Comp/Nuke/EV002/work/EV002_v001.nk
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {26 tk_render_mode l "  " +HIDDEN T "<i style='color:gold'>\[Proxy Mode]<i>"}
 addUserKnob {26 path_context l Context t "A preview of the file location generated by the node." T "\\\\sledge\\vol1\\Projects\\test_donat_project\\Compositing\\Images\\Output\\EV002"}
 addUserKnob {26 path_local l "Local Path" t "A preview of the file location generated by the node." T "sandbox\\images\\EV002_v001"}
 addUserKnob {26 path_filename l "File Name" t "A preview of the file location generated by the node." T EV002_output_v001.%04d.exr}
 addUserKnob {26 path_warning l " " +HIDDEN T ""}
 addUserKnob {22 reset_path l "Reset Path" +HIDDEN T "import nuke\nif hasattr(nuke, \"_shotgun_write_node_handler\"):\n    nuke._shotgun_write_node_handler.on_reset_render_path_gizmo_callback()" +STARTLINE}
 addUserKnob {26 "" +STARTLINE T "   "}
 addUserKnob {22 show_in_fs l "Jump to File System" t "Opens a file system browser and navigates to the folder where the renders are written to." T "import nuke\nif hasattr(nuke, \"_shotgun_write_node_handler\"):\n    nuke._shotgun_write_node_handler.on_show_in_fs_gizmo_callback()" +STARTLINE}
 addUserKnob {22 tk_copy_path l "Copy Path to Clipboard" t "Copies the current render/proxy path to the clipboard" -STARTLINE T "import nuke\nif hasattr(nuke, \"_shotgun_write_node_handler\"):\n    nuke._shotgun_write_node_handler.on_copy_path_to_clipboard_gizmo_callback()"}
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {41 channels T Write1.channels}
 addUserKnob {41 frame_mode l frame T Write1.frame_mode}
 addUserKnob {41 frame l "" -STARTLINE T Write1.frame}
 addUserKnob {41 colorspace T Write1.colorspace}
 addUserKnob {41 raw l "raw data" -STARTLINE T Write1.raw}
 addUserKnob {41 premultiplied -STARTLINE T Write1.premultiplied}
 addUserKnob {80 Reformat2_disable l "Reset BBox" t "Resets the bounding box to the format of the input.\n\nEnable this if you the EXR files are to be imported in Scratch for example." -STARTLINE}
 Reformat2_disable true
 addUserKnob {41 views T Write1.views}
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {26 tk_render_warning l " " +HIDDEN T ""}
 addUserKnob {41 render_order l "render order" T Write1.render_order}
 addUserKnob {41 Render -STARTLINE T Write1.Render}
 addUserKnob {41 first l "frame range" T Write1.first}
 addUserKnob {41 last l "" -STARTLINE T Write1.last}
 addUserKnob {41 use_limit l "limit to range" -STARTLINE T Write1.use_limit}
 addUserKnob {41 reading l "read file" T Write1.reading}
 addUserKnob {41 checkHashOnRead l "" -STARTLINE +INVISIBLE T Write1.checkHashOnRead}
 addUserKnob {41 on_error l "missing frames" T Write1.on_error}
 addUserKnob {41 reload l Reload -STARTLINE T Write1.reload}
 knobChanged "import nuke\nif hasattr(nuke, \"_shotgun_write_node_handler\"):\n    nuke._shotgun_write_node_handler.on_knob_changed_gizmo_callback()"
 onCreate "import nuke\nif hasattr(nuke, \"_shotgun_write_node_handler\"):\n    nuke._shotgun_write_node_handler.on_node_created_gizmo_callback()"
}
 Input {
  inputs 0
  name Input
  xpos 195
  ypos -132
 }
 Reformat {
  type scale
  black_outside true
  name Reformat2
  label "Reset Bounding Box"
  selected true
  xpos 195
  ypos -108
  disable {{1-parent.Reformat2_disable}}
 }
 Write {
  file "\[python __import__('nuke')._shotgun_write_node_handler.on_compute_path_gizmo_callback() if hasattr(__import__('nuke'), '_shotgun_write_node_handler') else nuke.thisParent().knob('cached_path').value()]"
  proxy "\[python __import__('nuke')._shotgun_write_node_handler.on_compute_proxy_path_gizmo_callback() if hasattr(__import__('nuke'), '_shotgun_write_node_handler') else nuke.thisParent().knob('tk_cached_proxy_path').value()]"
  beforeRender "import nuke\nif hasattr(nuke, \"_shotgun_write_node_handler\"):\n    nuke._shotgun_write_node_handler.on_before_render_gizmo_callback()"
  afterRender "import nuke\nif hasattr(nuke, \"_shotgun_write_node_handler\"):\n    nuke._shotgun_write_node_handler.on_after_render_gizmo_callback()"
  name Write1
  xpos 195
  ypos -34
 }
set N2cf67dd0 [stack 0]
 Output {
  name Output1
  xpos 195
  ypos 66
 }
push $N2cf67dd0
 Reformat {
  type "to box"
  box_width 800
  box_height 1
  black_outside true
  name Reformat1
  xpos 249
  ypos 16
 }
 Write {
  file_type png

  name create_thumbnail
  xpos 362
  ypos 27
  disable true
 }
end_group
